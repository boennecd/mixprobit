// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// pmvnorm_cpp
Rcpp::List pmvnorm_cpp(arma::vec const& lower, arma::vec const& upper, arma::vec const& mean, arma::mat const& cov, int const maxpts, double const abseps, double const releps);
RcppExport SEXP _mixprobit_pmvnorm_cpp(SEXP lowerSEXP, SEXP upperSEXP, SEXP meanSEXP, SEXP covSEXP, SEXP maxptsSEXP, SEXP absepsSEXP, SEXP relepsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec const& >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type cov(covSEXP);
    Rcpp::traits::input_parameter< int const >::type maxpts(maxptsSEXP);
    Rcpp::traits::input_parameter< double const >::type abseps(absepsSEXP);
    Rcpp::traits::input_parameter< double const >::type releps(relepsSEXP);
    rcpp_result_gen = Rcpp::wrap(pmvnorm_cpp(lower, upper, mean, cov, maxpts, abseps, releps));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP run_testthat_tests();

static const R_CallMethodDef CallEntries[] = {
    {"_mixprobit_pmvnorm_cpp", (DL_FUNC) &_mixprobit_pmvnorm_cpp, 7},
    {"run_testthat_tests", (DL_FUNC) &run_testthat_tests, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_mixprobit(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
